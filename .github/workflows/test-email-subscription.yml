name: Email Subscription Testing Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'hooks/use-email-subscription.ts'
      - 'app/api/subscribe/**'
      - 'components/**/*subscription*'
      - '__tests__/**'
      - '*.config.*'
      - 'package*.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'hooks/use-email-subscription.ts'
      - 'app/api/subscribe/**'
      - 'components/**/*subscription*'
      - '__tests__/**'
      - '*.config.*'
      - 'package*.json'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: test
  CI: true
  # Test environment variables
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_ROLE_KEY }}

jobs:
  # Job 1: Setup and Lint
  setup-and-lint:
    name: Setup & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run type-check

      - name: Check code formatting
        run: npm run format:check

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: setup-and-lint
    
    strategy:
      matrix:
        test-group:
          - 'hooks'
          - 'api'
          - 'components'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run unit tests - ${{ matrix.test-group }}
        run: npm test -- __tests__/unit/${{ matrix.test-group }} --coverage --coverageReporters=json --coverageDirectory=coverage/${{ matrix.test-group }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage/${{ matrix.test-group }}
          flags: unit-${{ matrix.test-group }}
          name: unit-tests-${{ matrix.test-group }}
          fail_ci_if_error: false

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: setup-and-lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run integration tests
        run: npm test -- __tests__/integration --coverage --coverageReporters=json --coverageDirectory=coverage/integration

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage/integration
          flags: integration
          name: integration-tests
          fail_ci_if_error: false

  # Job 4: Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: setup-and-lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run accessibility tests
        run: npm test -- __tests__/accessibility --coverage --coverageReporters=json --coverageDirectory=coverage/accessibility

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage/accessibility
          flags: accessibility
          name: accessibility-tests
          fail_ci_if_error: false

  # Job 5: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: setup-and-lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run performance tests
        run: npm test -- __tests__/performance --coverage --coverageReporters=json --coverageDirectory=coverage/performance

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage/performance
          flags: performance
          name: performance-tests
          fail_ci_if_error: false

  # Job 6: E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests, integration-tests]

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Run E2E tests - ${{ matrix.browser }}
        run: npx playwright test --project=${{ matrix.browser }}

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 7

  # Job 7: Mobile E2E Tests
  mobile-e2e-tests:
    name: Mobile E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [unit-tests, integration-tests]

    strategy:
      matrix:
        device: ['Mobile Chrome', 'Mobile Safari']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run Mobile E2E tests - ${{ matrix.device }}
        run: npx playwright test --project="${{ matrix.device }}"

      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: mobile-test-results-${{ matrix.device }}
          path: test-results/
          retention-days: 7

  # Job 8: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: setup-and-lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit
        run: npm audit --audit-level high

      - name: Run security linting
        run: npx eslint . --ext .ts,.tsx --config .eslintrc.security.json || true

  # Job 9: Coverage Report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests, integration-tests, accessibility-tests, performance-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports/

      - name: Merge coverage reports
        run: |
          npx nyc merge coverage-reports/ coverage/coverage.json
          npx nyc report --reporter=html --reporter=lcov --reporter=text-summary

      - name: Upload merged coverage
        uses: codecov/codecov-action@v4
        with:
          directory: ./coverage
          flags: merged
          name: merged-coverage
          fail_ci_if_error: true

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const coverage = fs.readFileSync('coverage/lcov.info', 'utf8');
              const summary = 'Coverage report available in the Actions artifacts.';
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 📊 Test Coverage Report\n\n${summary}`
              });
            } catch (error) {
              console.log('Coverage report not found:', error);
            }

  # Job 10: Quality Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [unit-tests, integration-tests, accessibility-tests, performance-tests, e2e-tests, security-tests]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Checking quality gates..."
          
          # Check if all required jobs passed
          UNIT_RESULT="${{ needs.unit-tests.result }}"
          INTEGRATION_RESULT="${{ needs.integration-tests.result }}"
          E2E_RESULT="${{ needs.e2e-tests.result }}"
          A11Y_RESULT="${{ needs.accessibility-tests.result }}"
          PERF_RESULT="${{ needs.performance-tests.result }}"
          SECURITY_RESULT="${{ needs.security-tests.result }}"
          
          echo "Unit tests: $UNIT_RESULT"
          echo "Integration tests: $INTEGRATION_RESULT"
          echo "E2E tests: $E2E_RESULT"
          echo "Accessibility tests: $A11Y_RESULT"
          echo "Performance tests: $PERF_RESULT"
          echo "Security tests: $SECURITY_RESULT"
          
          # Fail if any critical tests failed
          if [[ "$UNIT_RESULT" == "failure" || "$INTEGRATION_RESULT" == "failure" || "$E2E_RESULT" == "failure" ]]; then
            echo "❌ Critical tests failed!"
            exit 1
          fi
          
          # Warn for non-critical test failures
          if [[ "$A11Y_RESULT" == "failure" || "$PERF_RESULT" == "failure" || "$SECURITY_RESULT" == "failure" ]]; then
            echo "⚠️  Non-critical tests failed, but build can continue"
          fi
          
          echo "✅ All quality gates passed!"

      - name: Update status check
        if: always()
        run: |
          STATUS="${{ job.status }}"
          echo "Final quality gate status: $STATUS"

# Cleanup old workflow runs
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    needs: [quality-gates]

    steps:
      - name: Delete old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 7
          keep_minimum_runs: 3