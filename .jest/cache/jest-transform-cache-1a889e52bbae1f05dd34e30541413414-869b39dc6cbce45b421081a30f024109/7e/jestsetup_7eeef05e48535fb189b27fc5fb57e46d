016c645efa6e7ee960de14689c6f7a7b
/**
 * Jest Setup for Silk Song Archive Next.js
 * Global test configuration and custom matchers
 */ "use strict";
// ===== GLOBAL MOCKS =====
// Mock Next.js router
jest.mock('next/router', ()=>({
        useRouter: jest.fn(()=>({
                route: '/',
                pathname: '/',
                query: {},
                asPath: '/',
                push: jest.fn(),
                replace: jest.fn(),
                reload: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                prefetch: jest.fn().mockResolvedValue(undefined),
                beforePopState: jest.fn(),
                events: {
                    on: jest.fn(),
                    off: jest.fn(),
                    emit: jest.fn()
                },
                isFallback: false,
                isLocaleDomain: false,
                isReady: true,
                defaultLocale: 'en',
                domainLocales: [],
                isPreview: false
            }))
    }));
// Mock Next.js navigation (App Router)
jest.mock('next/navigation', ()=>({
        useRouter: jest.fn(()=>({
                push: jest.fn(),
                replace: jest.fn(),
                refresh: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                prefetch: jest.fn()
            })),
        usePathname: jest.fn(()=>'/'),
        useSearchParams: jest.fn(()=>new URLSearchParams()),
        useParams: jest.fn(()=>({}))
    }));
// Mock Next.js dynamic imports
jest.mock('next/dynamic', ()=>(func)=>{
        const dynamicModule = func();
        const MockedComponent = (props)=>{
            return React.createElement('div', props, 'Mocked Dynamic Component');
        };
        MockedComponent.displayName = 'MockedDynamicComponent';
        return MockedComponent;
    });
// Mock Next.js Image component
jest.mock('next/image', ()=>{
    const MockedImage = ({ src, alt, ...props })=>{
        // eslint-disable-next-line @next/next/no-img-element, jsx-a11y/alt-text
        return React.createElement('img', {
            src,
            alt,
            ...props
        });
    };
    MockedImage.displayName = 'NextImage';
    return MockedImage;
});
// Mock Next.js Link component
jest.mock('next/link', ()=>{
    const MockedLink = ({ children, href, ...props })=>{
        return React.createElement('a', {
            href,
            ...props
        }, children);
    };
    MockedLink.displayName = 'NextLink';
    return MockedLink;
});
// Mock Framer Motion
jest.mock('framer-motion', ()=>({
        motion: {
            div: 'div',
            section: 'section',
            article: 'article',
            header: 'header',
            footer: 'footer',
            nav: 'nav',
            main: 'main',
            aside: 'aside',
            h1: 'h1',
            h2: 'h2',
            h3: 'h3',
            h4: 'h4',
            h5: 'h5',
            h6: 'h6',
            p: 'p',
            span: 'span',
            a: 'a',
            button: 'button',
            img: 'img',
            ul: 'ul',
            ol: 'ol',
            li: 'li',
            form: 'form',
            input: 'input',
            textarea: 'textarea',
            select: 'select',
            option: 'option'
        },
        AnimatePresence: ({ children })=>children,
        useAnimation: ()=>({
                start: jest.fn(),
                stop: jest.fn(),
                set: jest.fn()
            }),
        useInView: ()=>true,
        useScroll: ()=>({
                scrollYProgress: {
                    get: ()=>0
                }
            }),
        useSpring: (value)=>({
                get: ()=>value
            }),
        useTransform: (value, input, output)=>({
                get: ()=>output[0]
            }),
        useMotionValue: (initial)=>({
                get: ()=>initial,
                set: jest.fn()
            })
    }));
// ===== SUPABASE MOCKS =====
// Mock Supabase client
jest.mock('@/lib/supabase/client', ()=>({
        supabase: {
            from: jest.fn(()=>({
                    select: jest.fn().mockReturnThis(),
                    insert: jest.fn().mockReturnThis(),
                    update: jest.fn().mockReturnThis(),
                    delete: jest.fn().mockReturnThis(),
                    eq: jest.fn().mockReturnThis(),
                    neq: jest.fn().mockReturnThis(),
                    gt: jest.fn().mockReturnThis(),
                    gte: jest.fn().mockReturnThis(),
                    lt: jest.fn().mockReturnThis(),
                    lte: jest.fn().mockReturnThis(),
                    like: jest.fn().mockReturnThis(),
                    ilike: jest.fn().mockReturnThis(),
                    is: jest.fn().mockReturnThis(),
                    in: jest.fn().mockReturnThis(),
                    contains: jest.fn().mockReturnThis(),
                    containedBy: jest.fn().mockReturnThis(),
                    range: jest.fn().mockReturnThis(),
                    match: jest.fn().mockReturnThis(),
                    not: jest.fn().mockReturnThis(),
                    or: jest.fn().mockReturnThis(),
                    filter: jest.fn().mockReturnThis(),
                    order: jest.fn().mockReturnThis(),
                    limit: jest.fn().mockReturnThis(),
                    offset: jest.fn().mockReturnThis(),
                    single: jest.fn().mockResolvedValue({
                        data: null,
                        error: null
                    }),
                    maybeSingle: jest.fn().mockResolvedValue({
                        data: null,
                        error: null
                    }),
                    then: jest.fn().mockResolvedValue({
                        data: [],
                        error: null
                    })
                })),
            auth: {
                getSession: jest.fn().mockResolvedValue({
                    data: {
                        session: null
                    },
                    error: null
                }),
                getUser: jest.fn().mockResolvedValue({
                    data: {
                        user: null
                    },
                    error: null
                }),
                signOut: jest.fn().mockResolvedValue({
                    error: null
                }),
                onAuthStateChange: jest.fn(()=>({
                        data: {
                            subscription: {
                                unsubscribe: jest.fn()
                            }
                        }
                    }))
            },
            storage: {
                from: jest.fn(()=>({
                        upload: jest.fn().mockResolvedValue({
                            data: null,
                            error: null
                        }),
                        download: jest.fn().mockResolvedValue({
                            data: null,
                            error: null
                        }),
                        remove: jest.fn().mockResolvedValue({
                            data: null,
                            error: null
                        }),
                        list: jest.fn().mockResolvedValue({
                            data: [],
                            error: null
                        }),
                        getPublicUrl: jest.fn(()=>({
                                data: {
                                    publicUrl: 'https://example.com/file.jpg'
                                }
                            }))
                    }))
            }
        },
        executeQuery: jest.fn().mockResolvedValue({}),
        SupabaseQueryError: jest.fn().mockImplementation((message)=>{
            const error = new Error(message);
            error.name = 'SupabaseQueryError';
            return error;
        })
    }));
// ===== REACT QUERY MOCKS =====
// Mock TanStack Query
jest.mock('@tanstack/react-query', ()=>({
        useQuery: jest.fn(()=>({
                data: null,
                error: null,
                isLoading: false,
                isError: false,
                isSuccess: true,
                refetch: jest.fn()
            })),
        useMutation: jest.fn(()=>({
                mutate: jest.fn(),
                mutateAsync: jest.fn(),
                isLoading: false,
                isError: false,
                isSuccess: false,
                error: null,
                data: null,
                reset: jest.fn()
            })),
        useQueryClient: jest.fn(()=>({
                invalidateQueries: jest.fn(),
                setQueryData: jest.fn(),
                getQueryData: jest.fn(),
                prefetchQuery: jest.fn(),
                clear: jest.fn()
            })),
        QueryClient: jest.fn(),
        QueryClientProvider: ({ children })=>children
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "render", {
    enumerable: true,
    get: function() {
        return render;
    }
});
const _jsxruntime = require("react/jsx-runtime");
require("@testing-library/jest-dom");
const _react = _export_star(require("@testing-library/react"), exports);
const _nextthemes = require("next-themes");
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
// ===== ENVIRONMENT VARIABLES =====
// Mock environment variables for testing
process.env.NODE_ENV = 'test';
process.env.NEXT_PUBLIC_APP_URL = 'http://localhost:3000';
process.env.NEXT_PUBLIC_APP_NAME = 'Silk Song Archive Test';
process.env.NEXT_PUBLIC_SUPABASE_URL = 'https://test.supabase.co';
process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = 'test-anon-key';
// Mock Intersection Observer
global.IntersectionObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn(),
        root: null,
        rootMargin: '',
        thresholds: []
    }));
// Mock ResizeObserver
global.ResizeObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock matchMedia
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock scrollTo
Object.defineProperty(window, 'scrollTo', {
    writable: true,
    value: jest.fn()
});
// Mock localStorage
Object.defineProperty(window, 'localStorage', {
    value: {
        getItem: jest.fn((key)=>null),
        setItem: jest.fn(),
        removeItem: jest.fn(),
        clear: jest.fn(),
        length: 0,
        key: jest.fn()
    },
    writable: true
});
// Mock sessionStorage
Object.defineProperty(window, 'sessionStorage', {
    value: {
        getItem: jest.fn((key)=>null),
        setItem: jest.fn(),
        removeItem: jest.fn(),
        clear: jest.fn(),
        length: 0,
        key: jest.fn()
    },
    writable: true
});
function render(ui, { ...renderOptions } = {}) {
    function Wrapper({ children }) {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_nextthemes.ThemeProvider, {
            attribute: "class",
            defaultTheme: "light",
            enableSystem: true,
            children: children
        });
    }
    return (0, _react.render)(ui, {
        wrapper: Wrapper,
        ...renderOptions
    });
}
// ===== GLOBAL TEST HELPERS =====
// Global test data factory
global.createMockGameInfo = ()=>({
        id: '1',
        title: 'Hollow Knight: Silksong',
        developer: 'Team Cherry',
        status: 'in-development',
        releaseDate: null,
        platforms: [
            'pc',
            'steam',
            'nintendo-switch'
        ],
        description: 'Test game description',
        features: [
            'Test feature 1',
            'Test feature 2'
        ]
    });
global.createMockUser = ()=>({
        id: '1',
        email: 'test@example.com',
        user_metadata: {
            username: 'testuser'
        },
        created_at: new Date().toISOString()
    });
// ===== ERROR HANDLING =====
// Suppress console warnings in tests unless explicitly needed
const originalConsoleError = console.error;
const originalConsoleWarn = console.warn;
beforeAll(()=>{
    console.error = (...args)=>{
        if (typeof args[0] === 'string' && args[0].includes('Warning: ReactDOM.render is no longer supported')) {
            return;
        }
        originalConsoleError.call(console, ...args);
    };
    console.warn = (...args)=>{
        if (typeof args[0] === 'string' && (args[0].includes('componentWillReceiveProps') || args[0].includes('componentWillUpdate'))) {
            return;
        }
        originalConsoleWarn.call(console, ...args);
    };
});
afterAll(()=>{
    console.error = originalConsoleError;
    console.warn = originalConsoleWarn;
});
// ===== CLEANUP =====
// Clean up after each test
afterEach(()=>{
    jest.clearAllMocks();
});

//# sourceMappingURL=data:application/json;base64,