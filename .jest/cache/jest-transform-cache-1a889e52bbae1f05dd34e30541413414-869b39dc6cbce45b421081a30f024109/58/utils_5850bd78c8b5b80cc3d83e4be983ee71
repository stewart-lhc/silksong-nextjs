fcfb0d65bdafacc8f7a172680c6b3cca
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get cn () {
        return cn;
    },
    get debounce () {
        return debounce;
    },
    get deepClone () {
        return deepClone;
    },
    get delay () {
        return delay;
    },
    get formatDate () {
        return formatDate;
    },
    get formatError () {
        return formatError;
    },
    get generateId () {
        return generateId;
    },
    get throttle () {
        return throttle;
    },
    get truncateText () {
        return truncateText;
    }
});
const _clsx = require("clsx");
const _tailwindmerge = require("tailwind-merge");
function cn(...inputs) {
    return (0, _tailwindmerge.twMerge)((0, _clsx.clsx)(inputs));
}
function formatError(error) {
    if (error instanceof Error) {
        return error.message;
    }
    return String(error);
}
function delay(ms) {
    return new Promise((resolve)=>setTimeout(resolve, ms));
}
function generateId(length = 8) {
    return Math.random().toString(36).substring(2, length + 2);
}
function formatDate(date, locale = 'zh-CN') {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleDateString(locale);
}
function truncateText(text, maxLength, suffix = '...') {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength - suffix.length) + suffix;
}
function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
function debounce(func, wait) {
    let timeout = null;
    return (...args)=>{
        if (timeout) clearTimeout(timeout);
        timeout = setTimeout(()=>func(...args), wait);
    };
}
function throttle(func, limit) {
    let inThrottle = false;
    return (...args)=>{
        if (!inThrottle) {
            func(...args);
            inThrottle = true;
            setTimeout(()=>inThrottle = false, limit);
        }
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6XFxHaXRIdWJcXHNpbGtzb25nLW5leHRqc1xcbGliXFx1dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIENsYXNzVmFsdWUsIGNsc3ggfSBmcm9tIFwiY2xzeFwiXHJcbmltcG9ydCB7IHR3TWVyZ2UgfSBmcm9tIFwidGFpbHdpbmQtbWVyZ2VcIlxyXG5cclxuLyoqXHJcbiAqIOWQiOW5tiBUYWlsd2luZCBDU1Mg57G75ZCN55qE5bel5YW35Ye95pWwXHJcbiAqIOS9v+eUqCBjbHN4IOWkhOeQhuadoeS7tuexu+WQje+8jHR3TWVyZ2Ug5aSE55CG5Yay56qB55qEIFRhaWx3aW5kIOexu1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNuKC4uLmlucHV0czogQ2xhc3NWYWx1ZVtdKSB7XHJcbiAgcmV0dXJuIHR3TWVyZ2UoY2xzeChpbnB1dHMpKVxyXG59XHJcblxyXG4vKipcclxuICog5qC85byP5YyW6ZSZ6K+v5raI5oGv55qE5bel5YW35Ye95pWwXHJcbiAqIEBwYXJhbSBlcnJvciAtIOmUmeivr+WvueixoVxyXG4gKiBAcmV0dXJucyDmoLzlvI/ljJbnmoTplJnor6/mtojmga9cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRFcnJvcihlcnJvcjogdW5rbm93bik6IHN0cmluZyB7XHJcbiAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgIHJldHVybiBlcnJvci5tZXNzYWdlXHJcbiAgfVxyXG4gIHJldHVybiBTdHJpbmcoZXJyb3IpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDlu7bov5/miafooYznmoTlt6Xlhbflh73mlbBcclxuICogQHBhcmFtIG1zIC0g5bu26L+f5pe26Ze077yI5q+r56eS77yJXHJcbiAqIEByZXR1cm5zIFByb21pc2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWxheShtczogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiDnlJ/miJDpmo/mnLogSUQg55qE5bel5YW35Ye95pWwXHJcbiAqIEBwYXJhbSBsZW5ndGggLSBJRCDplb/luqZcclxuICogQHJldHVybnMg6ZqP5py65a2X56ym5LiyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVJZChsZW5ndGg6IG51bWJlciA9IDgpOiBzdHJpbmcge1xyXG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgbGVuZ3RoICsgMilcclxufVxyXG5cclxuLyoqXHJcbiAqIOagvOW8j+WMluaXpeacn+eahOW3peWFt+WHveaVsFxyXG4gKiBAcGFyYW0gZGF0ZSAtIOaXpeacn+WvueixoeaIluWtl+espuS4slxyXG4gKiBAcGFyYW0gbG9jYWxlIC0g5Yy65Z+f6K6+572uXHJcbiAqIEByZXR1cm5zIOagvOW8j+WMlueahOaXpeacn+Wtl+espuS4slxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZTogRGF0ZSB8IHN0cmluZywgbG9jYWxlOiBzdHJpbmcgPSAnemgtQ04nKTogc3RyaW5nIHtcclxuICBjb25zdCBkYXRlT2JqID0gdHlwZW9mIGRhdGUgPT09ICdzdHJpbmcnID8gbmV3IERhdGUoZGF0ZSkgOiBkYXRlXHJcbiAgcmV0dXJuIGRhdGVPYmoudG9Mb2NhbGVEYXRlU3RyaW5nKGxvY2FsZSlcclxufVxyXG5cclxuLyoqXHJcbiAqIOaIquaWreaWh+acrOeahOW3peWFt+WHveaVsFxyXG4gKiBAcGFyYW0gdGV4dCAtIOWOn+Wni+aWh+acrFxyXG4gKiBAcGFyYW0gbWF4TGVuZ3RoIC0g5pyA5aSn6ZW/5bqmXHJcbiAqIEBwYXJhbSBzdWZmaXggLSDlkI7nvIBcclxuICogQHJldHVybnMg5oiq5pat5ZCO55qE5paH5pysXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdHJ1bmNhdGVUZXh0KHRleHQ6IHN0cmluZywgbWF4TGVuZ3RoOiBudW1iZXIsIHN1ZmZpeDogc3RyaW5nID0gJy4uLicpOiBzdHJpbmcge1xyXG4gIGlmICh0ZXh0Lmxlbmd0aCA8PSBtYXhMZW5ndGgpIHJldHVybiB0ZXh0XHJcbiAgcmV0dXJuIHRleHQuc3Vic3RyaW5nKDAsIG1heExlbmd0aCAtIHN1ZmZpeC5sZW5ndGgpICsgc3VmZml4XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDmt7HluqblpI3liLblr7nosaHnmoTlt6Xlhbflh73mlbBcclxuICogQHBhcmFtIG9iaiAtIOimgeWkjeWItueahOWvueixoVxyXG4gKiBAcmV0dXJucyDlpI3liLblkI7nmoTlr7nosaFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWVwQ2xvbmU8VD4ob2JqOiBUKTogVCB7XHJcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSlcclxufVxyXG5cclxuLyoqXHJcbiAqIOmYsuaKluWHveaVsFxyXG4gKiBAcGFyYW0gZnVuYyAtIOimgemYsuaKlueahOWHveaVsFxyXG4gKiBAcGFyYW0gd2FpdCAtIOetieW+heaXtumXtFxyXG4gKiBAcmV0dXJucyDpmLLmipblkI7nmoTlh73mlbBcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZTxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KFxyXG4gIGZ1bmM6IFQsXHJcbiAgd2FpdDogbnVtYmVyXHJcbik6ICguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KSA9PiB2b2lkIHtcclxuICBsZXQgdGltZW91dDogTm9kZUpTLlRpbWVvdXQgfCBudWxsID0gbnVsbFxyXG4gIFxyXG4gIHJldHVybiAoLi4uYXJnczogUGFyYW1ldGVyczxUPikgPT4ge1xyXG4gICAgaWYgKHRpbWVvdXQpIGNsZWFyVGltZW91dCh0aW1lb3V0KVxyXG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gZnVuYyguLi5hcmdzKSwgd2FpdClcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDoioLmtYHlh73mlbBcclxuICogQHBhcmFtIGZ1bmMgLSDopoHoioLmtYHnmoTlh73mlbBcclxuICogQHBhcmFtIGxpbWl0IC0g6ZmQ5Yi25pe26Ze0XHJcbiAqIEByZXR1cm5zIOiKgua1geWQjueahOWHveaVsFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlPFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueT4oXHJcbiAgZnVuYzogVCxcclxuICBsaW1pdDogbnVtYmVyXHJcbik6ICguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KSA9PiB2b2lkIHtcclxuICBsZXQgaW5UaHJvdHRsZTogYm9vbGVhbiA9IGZhbHNlXHJcbiAgXHJcbiAgcmV0dXJuICguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KSA9PiB7XHJcbiAgICBpZiAoIWluVGhyb3R0bGUpIHtcclxuICAgICAgZnVuYyguLi5hcmdzKVxyXG4gICAgICBpblRocm90dGxlID0gdHJ1ZVxyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IGluVGhyb3R0bGUgPSBmYWxzZSwgbGltaXQpXHJcbiAgICB9XHJcbiAgfVxyXG59Il0sIm5hbWVzIjpbImNuIiwiZGVib3VuY2UiLCJkZWVwQ2xvbmUiLCJkZWxheSIsImZvcm1hdERhdGUiLCJmb3JtYXRFcnJvciIsImdlbmVyYXRlSWQiLCJ0aHJvdHRsZSIsInRydW5jYXRlVGV4dCIsImlucHV0cyIsInR3TWVyZ2UiLCJjbHN4IiwiZXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJTdHJpbmciLCJtcyIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImxlbmd0aCIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsImRhdGUiLCJsb2NhbGUiLCJkYXRlT2JqIiwiRGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsInRleHQiLCJtYXhMZW5ndGgiLCJzdWZmaXgiLCJvYmoiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJmdW5jIiwid2FpdCIsInRpbWVvdXQiLCJhcmdzIiwiY2xlYXJUaW1lb3V0IiwibGltaXQiLCJpblRocm90dGxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztRQU9nQkE7ZUFBQUE7O1FBd0VBQztlQUFBQTs7UUFWQUM7ZUFBQUE7O1FBekNBQztlQUFBQTs7UUFtQkFDO2VBQUFBOztRQS9CQUM7ZUFBQUE7O1FBcUJBQztlQUFBQTs7UUE0REFDO2VBQUFBOztRQXRDQUM7ZUFBQUE7OztzQkEzRHNCOytCQUNkO0FBTWpCLFNBQVNSLEdBQUcsR0FBR1MsTUFBb0I7SUFDeEMsT0FBT0MsSUFBQUEsc0JBQU8sRUFBQ0MsSUFBQUEsVUFBSSxFQUFDRjtBQUN0QjtBQU9PLFNBQVNKLFlBQVlPLEtBQWM7SUFDeEMsSUFBSUEsaUJBQWlCQyxPQUFPO1FBQzFCLE9BQU9ELE1BQU1FLE9BQU87SUFDdEI7SUFDQSxPQUFPQyxPQUFPSDtBQUNoQjtBQU9PLFNBQVNULE1BQU1hLEVBQVU7SUFDOUIsT0FBTyxJQUFJQyxRQUFRQyxDQUFBQSxVQUFXQyxXQUFXRCxTQUFTRjtBQUNwRDtBQU9PLFNBQVNWLFdBQVdjLFNBQWlCLENBQUM7SUFDM0MsT0FBT0MsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSUMsU0FBUyxDQUFDLEdBQUdKLFNBQVM7QUFDMUQ7QUFRTyxTQUFTaEIsV0FBV3FCLElBQW1CLEVBQUVDLFNBQWlCLE9BQU87SUFDdEUsTUFBTUMsVUFBVSxPQUFPRixTQUFTLFdBQVcsSUFBSUcsS0FBS0gsUUFBUUE7SUFDNUQsT0FBT0UsUUFBUUUsa0JBQWtCLENBQUNIO0FBQ3BDO0FBU08sU0FBU2xCLGFBQWFzQixJQUFZLEVBQUVDLFNBQWlCLEVBQUVDLFNBQWlCLEtBQUs7SUFDbEYsSUFBSUYsS0FBS1YsTUFBTSxJQUFJVyxXQUFXLE9BQU9EO0lBQ3JDLE9BQU9BLEtBQUtOLFNBQVMsQ0FBQyxHQUFHTyxZQUFZQyxPQUFPWixNQUFNLElBQUlZO0FBQ3hEO0FBT08sU0FBUzlCLFVBQWErQixHQUFNO0lBQ2pDLE9BQU9DLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsU0FBUyxDQUFDSDtBQUNuQztBQVFPLFNBQVNoQyxTQUNkb0MsSUFBTyxFQUNQQyxJQUFZO0lBRVosSUFBSUMsVUFBaUM7SUFFckMsT0FBTyxDQUFDLEdBQUdDO1FBQ1QsSUFBSUQsU0FBU0UsYUFBYUY7UUFDMUJBLFVBQVVwQixXQUFXLElBQU1rQixRQUFRRyxPQUFPRjtJQUM1QztBQUNGO0FBUU8sU0FBUy9CLFNBQ2Q4QixJQUFPLEVBQ1BLLEtBQWE7SUFFYixJQUFJQyxhQUFzQjtJQUUxQixPQUFPLENBQUMsR0FBR0g7UUFDVCxJQUFJLENBQUNHLFlBQVk7WUFDZk4sUUFBUUc7WUFDUkcsYUFBYTtZQUNieEIsV0FBVyxJQUFNd0IsYUFBYSxPQUFPRDtRQUN2QztJQUNGO0FBQ0YifQ==