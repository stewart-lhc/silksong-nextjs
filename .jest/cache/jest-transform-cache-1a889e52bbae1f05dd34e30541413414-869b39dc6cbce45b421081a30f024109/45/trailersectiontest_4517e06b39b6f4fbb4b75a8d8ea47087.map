{"version":3,"sources":["D:\\GitHub\\silksong-nextjs\\__tests__\\components\\trailer-section.test.tsx"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react';\r\nimport '@testing-library/jest-dom';\r\nimport { TrailerSection } from '@/components/trailer-section';\r\n\r\n// Mock the useMediaQuery hook\r\njest.mock('@/hooks/use-media-query', () => ({\r\n  useMediaQuery: jest.fn(() => false), // Default to desktop\r\n}));\r\n\r\ndescribe('TrailerSection', () => {\r\n  it('renders all 5 video trailers in carousel', () => {\r\n    render(<TrailerSection />);\r\n    \r\n    // Check if the section title is present\r\n    expect(screen.getByText('Experience the World of Silksong')).toBeInTheDocument();\r\n    \r\n    // Check if the carousel dots are present (should be 5)\r\n    const dots = screen.getAllByLabelText(/Go to trailer \\d+/);\r\n    expect(dots).toHaveLength(5);\r\n  });\r\n\r\n  it('shows first trailer by default', () => {\r\n    render(<TrailerSection />);\r\n    \r\n    // Check if the first trailer title is shown\r\n    expect(screen.getByText('Hollow Knight: Silksong - Release Trailer')).toBeInTheDocument();\r\n    expect(screen.getByText('Trailer 1 of 5')).toBeInTheDocument();\r\n  });\r\n\r\n  it('can navigate to next trailer', async () => {\r\n    render(<TrailerSection />);\r\n    \r\n    // Click next button\r\n    const nextButton = screen.getByLabelText('Next trailer');\r\n    fireEvent.click(nextButton);\r\n    \r\n    // Should show second trailer\r\n    await waitFor(() => {\r\n      expect(screen.getByText(\"Hollow Knight: Silksong - We've Played It! | gamescom 2025\")).toBeInTheDocument();\r\n      expect(screen.getByText('Trailer 2 of 5')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('can navigate to previous trailer', async () => {\r\n    render(<TrailerSection />);\r\n    \r\n    // Go to second trailer first\r\n    const nextButton = screen.getByLabelText('Next trailer');\r\n    fireEvent.click(nextButton);\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText(\"Hollow Knight: Silksong - We've Played It! | gamescom 2025\")).toBeInTheDocument();\r\n    });\r\n    \r\n    // Then go back to first\r\n    const prevButton = screen.getByLabelText('Previous trailer');\r\n    fireEvent.click(prevButton);\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('Hollow Knight: Silksong - Release Trailer')).toBeInTheDocument();\r\n      expect(screen.getByText('Trailer 1 of 5')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('can click on dots to navigate', async () => {\r\n    render(<TrailerSection />);\r\n    \r\n    // Click on third dot (index 2)\r\n    const thirdDot = screen.getByLabelText('Go to trailer 3');\r\n    fireEvent.click(thirdDot);\r\n    \r\n    // Should show third trailer\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Hollow Knight: Silksong Reveal Trailer')).toBeInTheDocument();\r\n      expect(screen.getByText('Trailer 3 of 5')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('wraps around when navigating beyond bounds', async () => {\r\n    render(<TrailerSection />);\r\n    \r\n    // Go to last trailer (5th)\r\n    const fifthDot = screen.getByLabelText('Go to trailer 5');\r\n    fireEvent.click(fifthDot);\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('Hollow Knight: Silksong - Details from Team Cherry')).toBeInTheDocument();\r\n    });\r\n    \r\n    // Click next should wrap to first trailer\r\n    const nextButton = screen.getByLabelText('Next trailer');\r\n    fireEvent.click(nextButton);\r\n    \r\n    await waitFor(() => {\r\n      expect(screen.getByText('Hollow Knight: Silksong - Release Trailer')).toBeInTheDocument();\r\n      expect(screen.getByText('Trailer 1 of 5')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('has correct YouTube links for each trailer', () => {\r\n    render(<TrailerSection />);\r\n    \r\n    // Check if YouTube link exists and updates correctly\r\n    const youtubeLink = screen.getByText('Watch on YouTube').closest('a');\r\n    expect(youtubeLink).toHaveAttribute('href', 'https://www.youtube.com/watch?v=6XGeJwsUP9c');\r\n    \r\n    // Navigate to second trailer\r\n    const nextButton = screen.getByLabelText('Next trailer');\r\n    fireEvent.click(nextButton);\r\n    \r\n    // YouTube link should update\r\n    setTimeout(() => {\r\n      const updatedLink = screen.getByText('Watch on YouTube').closest('a');\r\n      expect(updatedLink).toHaveAttribute('href', 'https://www.youtube.com/watch?v=hHnI6nlfE2A');\r\n    }, 100);\r\n  });\r\n\r\n  it('renders iframe with correct video embed URL', () => {\r\n    render(<TrailerSection />);\r\n    \r\n    // Check if iframe is present with correct src\r\n    const iframe = screen.getByTitle('Hollow Knight: Silksong - Release Trailer');\r\n    expect(iframe).toHaveAttribute('src', 'https://www.youtube.com/embed/6XGeJwsUP9c');\r\n  });\r\n});"],"names":["jest","mock","useMediaQuery","fn","describe","it","render","TrailerSection","expect","screen","getByText","toBeInTheDocument","dots","getAllByLabelText","toHaveLength","nextButton","getByLabelText","fireEvent","click","waitFor","prevButton","thirdDot","fifthDot","youtubeLink","closest","toHaveAttribute","setTimeout","updatedLink","iframe","getByTitle"],"mappings":"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"}