3f2545061fdc8fea47c341b412e064bf
"use strict";
// Mock the useMediaQuery hook
jest.mock('@/hooks/use-media-query', ()=>({
        useMediaQuery: jest.fn(()=>false)
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
require("@testing-library/jest-dom");
const _trailersection = require("../../components/trailer-section");
describe('TrailerSection', ()=>{
    it('renders all 5 video trailers in carousel', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_trailersection.TrailerSection, {}));
        // Check if the section title is present
        expect(_react.screen.getByText('Experience the World of Silksong')).toBeInTheDocument();
        // Check if the carousel dots are present (should be 5)
        const dots = _react.screen.getAllByLabelText(/Go to trailer \d+/);
        expect(dots).toHaveLength(5);
    });
    it('shows first trailer by default', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_trailersection.TrailerSection, {}));
        // Check if the first trailer title is shown
        expect(_react.screen.getByText('Hollow Knight: Silksong - Release Trailer')).toBeInTheDocument();
        expect(_react.screen.getByText('Trailer 1 of 5')).toBeInTheDocument();
    });
    it('can navigate to next trailer', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_trailersection.TrailerSection, {}));
        // Click next button
        const nextButton = _react.screen.getByLabelText('Next trailer');
        _react.fireEvent.click(nextButton);
        // Should show second trailer
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("Hollow Knight: Silksong - We've Played It! | gamescom 2025")).toBeInTheDocument();
            expect(_react.screen.getByText('Trailer 2 of 5')).toBeInTheDocument();
        });
    });
    it('can navigate to previous trailer', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_trailersection.TrailerSection, {}));
        // Go to second trailer first
        const nextButton = _react.screen.getByLabelText('Next trailer');
        _react.fireEvent.click(nextButton);
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("Hollow Knight: Silksong - We've Played It! | gamescom 2025")).toBeInTheDocument();
        });
        // Then go back to first
        const prevButton = _react.screen.getByLabelText('Previous trailer');
        _react.fireEvent.click(prevButton);
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Hollow Knight: Silksong - Release Trailer')).toBeInTheDocument();
            expect(_react.screen.getByText('Trailer 1 of 5')).toBeInTheDocument();
        });
    });
    it('can click on dots to navigate', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_trailersection.TrailerSection, {}));
        // Click on third dot (index 2)
        const thirdDot = _react.screen.getByLabelText('Go to trailer 3');
        _react.fireEvent.click(thirdDot);
        // Should show third trailer
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Hollow Knight: Silksong Reveal Trailer')).toBeInTheDocument();
            expect(_react.screen.getByText('Trailer 3 of 5')).toBeInTheDocument();
        });
    });
    it('wraps around when navigating beyond bounds', async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_trailersection.TrailerSection, {}));
        // Go to last trailer (5th)
        const fifthDot = _react.screen.getByLabelText('Go to trailer 5');
        _react.fireEvent.click(fifthDot);
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Hollow Knight: Silksong - Details from Team Cherry')).toBeInTheDocument();
        });
        // Click next should wrap to first trailer
        const nextButton = _react.screen.getByLabelText('Next trailer');
        _react.fireEvent.click(nextButton);
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText('Hollow Knight: Silksong - Release Trailer')).toBeInTheDocument();
            expect(_react.screen.getByText('Trailer 1 of 5')).toBeInTheDocument();
        });
    });
    it('has correct YouTube links for each trailer', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_trailersection.TrailerSection, {}));
        // Check if YouTube link exists and updates correctly
        const youtubeLink = _react.screen.getByText('Watch on YouTube').closest('a');
        expect(youtubeLink).toHaveAttribute('href', 'https://www.youtube.com/watch?v=6XGeJwsUP9c');
        // Navigate to second trailer
        const nextButton = _react.screen.getByLabelText('Next trailer');
        _react.fireEvent.click(nextButton);
        // YouTube link should update
        setTimeout(()=>{
            const updatedLink = _react.screen.getByText('Watch on YouTube').closest('a');
            expect(updatedLink).toHaveAttribute('href', 'https://www.youtube.com/watch?v=hHnI6nlfE2A');
        }, 100);
    });
    it('renders iframe with correct video embed URL', ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_trailersection.TrailerSection, {}));
        // Check if iframe is present with correct src
        const iframe = _react.screen.getByTitle('Hollow Knight: Silksong - Release Trailer');
        expect(iframe).toHaveAttribute('src', 'https://www.youtube.com/embed/6XGeJwsUP9c');
    });
});

//# sourceMappingURL=data:application/json;base64,